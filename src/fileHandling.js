const fs = require('fs');
const { status } = require('./printer');

/**
 * @typedef {Object} FileBundle
 * @property {string} path - path of file
 * @property {string} data - data to manipulate to file
 * @property {string} message - success message to print
 */

/**
 * Saves file
 * @param {FileBundle} file - data regarding file to save
 */
const saveFile = ({path, data, message}) => {
    try {
        fs.writeFileSync(path, data);
        console.log(status("info") + " " + message);
    } catch (err) {
        console.log(status('error') + " " + `Trying to save file (${path}) but got: ${err}`);
    }
}

/**
 * Appends to file
 * @param {FileBundle} file - data regarding file to append
 */
const appendFile = ({path, data, message}) => {
    try {
        fs.appendFileSync(path, data);
        console.log(status("info") + " " + message);
    } catch (err) {
        console.log(status('error') + " " + `Trying to append to file (${path}) but got: ${err}`);
    }
}

/**
 * Checks .gitignore for existance and existance of i18n_token.json in it
 * 
 * @typedef {Object} GitignoreBundle
 * @property {boolean} hasGitignore - Indicates whether .gitignore exists
 * @property {boolean} gitignoreHasToken - Indicates whether .gitignore has i18n_token.json
 * 
 * @returns {GitignoreBundle} The current existance and existance of i18n_token.json in it
 */
const checkGitignore = async () => {
    const hasGitignore = fs.existsSync('.gitignore');
    let gitignoreHasToken = false;
    if (hasGitignore) {
        try {
            const contents = fs.readFileSync('.gitignore');
            gitignoreHasToken = contents.includes("\ni18n_token.json\n");
        } catch (err) {
            console.log(status('error') + " " + `Trying to read .gitignore but got: ${err}`);
        }
    }
    const result = {
        hasGitignore,
        gitignoreHasToken
    }
    return result;
}

/**
 * Checks config for existance, validity and contents.
 * @typedef {Object} Config
 * @property {string} path - The path of where token and other json files are stored
 * @property {String[]} languages - A list of i18n languages denoted by it's keys
 * @property {string} spreadsheetId - ID of google sheet
 * @property {string} sheetName - sheet name in google sheet to reference
 * 
 * @typedef {Object} ConfigBundle
 * @property {boolean} hasConfig - Indicates whether the config files exists
 * @property {boolean} valid - Indicates whether the config file is valid
 * @property {Config} data - The contents of the config file.
 * 
 * @returns {ConfigBundle} The current existance, validity and contents of the config file 
 */
const checkConfig = () => {
    const hasConfig = fs.existsSync('i18n_config.json');
    let valid = hasConfig;
    let data = null;
    if (hasConfig) {
        try {
            const contents = JSON.parse(fs.readFileSync('i18n_config.json'));
            if (!contents.path || (typeof contents.path != 'string')) valid = false;
            if (!contents.languages || !Array.isArray(contents.languages)) valid = false;
            if (!contents.spreadsheetId || (typeof contents.spreadsheetId != 'string')) valid = false;
            if (!contents.sheetName || (typeof contents.sheetName != 'string')) valid = false;
            if (!fs.existsSync(contents.path)) valid = false;
            data = contents;
        } catch (err) {
            console.log(status('error') + " " + `Trying to read i18n_config.json but got: ${err}`);
            valid = false;
        }
    }

    const result = {
        hasConfig,
        valid,
        data
    };
    return result;
}

/**
 * Checks token for existance, validity and contents.
 * @typedef {Object} Token
 * @property {string} access_token - The access token generated by google
 * @property {string} refresh_token - The refresh token generated by google
 * @property {string} scope - The scopes of requested access. This library only requested for google sheets
 * @property {string} token_type - The token type generated by google(Should be bearer)
 * @property {number} expiry_date - The expiry date generated by google
 * @property {string} createdOn - The date of when the token was created
 * 
 * @typedef {Object} TokenBundle
 * @property {boolean} hasToken - Indicates whether the token files exists
 * @property {boolean} valid - Indicates whether the token file is valid
 * @property {Token} data - The contents of the token file.
 * 
 * @param {string} location path of the token
 * @returns {TokenBundle} The current existance, validity and contents of the token file 
 */
const checkToken = (location) => {
    const path = `${location}/i18n_token.json`;
    const hasToken = fs.existsSync(`${path}`);
    let valid = hasToken;
    let data = null;
    if (hasToken) {
        try {
            const contents = JSON.parse(fs.readFileSync(path));
            if (!contents.access_token || (typeof contents.access_token != 'string')) valid = false;
            if (!contents.refresh_token || (typeof contents.refresh_token != 'string')) valid = false;
            if (!contents.scope || (typeof contents.scope != 'string')) valid = false;
            if (!contents.token_type || (typeof contents.token_type != 'string')) valid = false;
            if (!contents.expiry_date || (typeof contents.expiry_date != 'number')) valid = false;
            if (!contents.createdOn || (typeof contents.createdOn != 'string')) valid = false;
            data = contents;
        } catch (err) {
            console.log(status('error') + " " + `Trying to read ${path} but got: ${err}`);
            valid = false;
        }
    }

    const result = {
        hasToken,
        valid,
        data
    }
    return result;
}

module.exports = {
    saveFile,
    appendFile,
    checkGitignore,
    checkConfig,
    checkToken
}